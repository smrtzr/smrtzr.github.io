"use strict";(self.webpackChunk_smrtzr_docs=self.webpackChunk_smrtzr_docs||[]).push([[644],{8499:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var a=t(4848),r=t(8453);const o={},s="React Native",c={id:"app/react-native/react-native",title:"React Native",description:"You can embed a Smartzer player inside of a React Native app by using a WebView using code similar to below",source:"@site/docs/app/react-native/react-native.mdx",sourceDirName:"app/react-native",slug:"/app/react-native/",permalink:"/app/react-native/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sdkSidebar",previous:{title:"iOS",permalink:"/app/native/sending_events/ios"}},i={},p=[];function u(e){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"react-native",children:"React Native"}),"\n",(0,a.jsxs)(n.p,{children:["You can embed a Smartzer player inside of a React Native app by using a ",(0,a.jsx)(n.code,{children:"WebView"})," using code similar to below"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { WebView } from 'react-native-webview';\nimport { useMemo } from 'react';\n\nconst SmartzerPlayer = () => {\n  const webViewSourceProps = useMemo(\n    () => ({\n      uri: '<your_player_url>',\n    }),\n    []\n  );\n\n  return <WebView source={webViewSourceProps} />;\n};\n\nexport default SmartzerPlayer;\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you want to listen to call to action events from the player, you can use the ",(0,a.jsx)(n.code,{children:"onMessage"})," prop of the ",(0,a.jsx)(n.code,{children:"WebView"})," component. The ",(0,a.jsx)(n.code,{children:"onMessage"})," prop is a function that will be called whenever the player sends a message to the parent window"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:"import { WebView, WebViewMessageEvent } from 'react-native-webview';\nimport { useMemo, useCallback } from 'react';\n\nconst SmartzerPlayer = () => {\n  const webViewSourceProps = useMemo(\n    () => ({\n      uri: '<your_player_url>',\n    }),\n    []\n  );\n\n  const onMessage = useCallback((event: WebViewMessageEvent) => {\n    if (e.nativeEvent.data) {\n      try {\n        const eventData = JSON.parse(e.nativeEvent.data);\n        if (eventData.event_type === 'smrtzr_cta') {\n          const productData = JSON.parse(eventData.cta);\n          const { type, cta } = productData;\n          switch (type) {\n            case 'goTo':\n              // TODO: load the product info into the viewport using `cta` as sku\n              break;\n            case 'addToCart':\n              // TODO: add the product to the cart using `cta` as sku\n              break;\n            default:\n              break;\n          }\n        }\n      } catch (e) {}\n    }\n  }, []);\n\n  return <WebView source={webViewSourceProps} onMessage={onMessage} />;\n};\n\nexport default SmartzerPlayer;\n"})})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(6540);const r={},o=a.createContext(r);function s(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);